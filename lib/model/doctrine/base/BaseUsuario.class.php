<?php

/**
 * BaseUsuario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $tipo_usuario_id
 * @property TipoUsuario $TipoUsuario
 * @property Doctrine_Collection $Conta
 * 
 * @method integer             getUserId()          Returns the current record's "user_id" value
 * @method integer             getTipoUsuarioId()   Returns the current record's "tipo_usuario_id" value
 * @method TipoUsuario         getTipoUsuario()     Returns the current record's "TipoUsuario" value
 * @method Doctrine_Collection getConta()           Returns the current record's "Conta" collection
 * @method Usuario             setUserId()          Sets the current record's "user_id" value
 * @method Usuario             setTipoUsuarioId()   Sets the current record's "tipo_usuario_id" value
 * @method Usuario             setTipoUsuario()     Sets the current record's "TipoUsuario" value
 * @method Usuario             setConta()           Sets the current record's "Conta" collection
 * 
 * @package    Encurtador
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsuario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('usuario');
        $this->hasColumn('user_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             ));
        $this->hasColumn('tipo_usuario_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => 11,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TipoUsuario', array(
             'local' => 'tipo_usuario_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT',
             'onUpdate' => 'RESTRICT'));

        $this->hasMany('Conta', array(
             'local' => 'id',
             'foreign' => 'usuario_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}